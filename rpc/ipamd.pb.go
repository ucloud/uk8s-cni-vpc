// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: rpc/ipamd.proto

package rpc

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CNIErrorCode int32

const (
	CNIErrorCode_CNISuccess                    CNIErrorCode = 0
	CNIErrorCode_CNIMissingParameters          CNIErrorCode = 1001
	CNIErrorCode_CNIAllocateSecondaryIPFailure CNIErrorCode = 1002
	CNIErrorCode_CNIReleaseSecondaryIPFailure  CNIErrorCode = 1003
	CNIErrorCode_CNIAllocateEIPFailure         CNIErrorCode = 1004
	CNIErrorCode_CNIReleaseEIPFailure          CNIErrorCode = 1005
	CNIErrorCode_CNIBindEIPFailure             CNIErrorCode = 1006
	CNIErrorCode_CNIUnbindEIPFailure           CNIErrorCode = 1007
	CNIErrorCode_CNIAllocateUNIFailure         CNIErrorCode = 1008
	CNIErrorCode_CNIReleaseUNIFailure          CNIErrorCode = 1009
	CNIErrorCode_CNIAttachUNIFailure           CNIErrorCode = 1010
	CNIErrorCode_CNIDetachUNIFailure           CNIErrorCode = 1011
	CNIErrorCode_CNIK8SAPIError                CNIErrorCode = 1012
	CNIErrorCode_CNIWriteDBError               CNIErrorCode = 1013
	CNIErrorCode_CNIReadDBError                CNIErrorCode = 1014
	CNIErrorCode_CNIBorrowIPFailure            CNIErrorCode = 1015
)

// Enum value maps for CNIErrorCode.
var (
	CNIErrorCode_name = map[int32]string{
		0:    "CNISuccess",
		1001: "CNIMissingParameters",
		1002: "CNIAllocateSecondaryIPFailure",
		1003: "CNIReleaseSecondaryIPFailure",
		1004: "CNIAllocateEIPFailure",
		1005: "CNIReleaseEIPFailure",
		1006: "CNIBindEIPFailure",
		1007: "CNIUnbindEIPFailure",
		1008: "CNIAllocateUNIFailure",
		1009: "CNIReleaseUNIFailure",
		1010: "CNIAttachUNIFailure",
		1011: "CNIDetachUNIFailure",
		1012: "CNIK8SAPIError",
		1013: "CNIWriteDBError",
		1014: "CNIReadDBError",
		1015: "CNIBorrowIPFailure",
	}
	CNIErrorCode_value = map[string]int32{
		"CNISuccess":                    0,
		"CNIMissingParameters":          1001,
		"CNIAllocateSecondaryIPFailure": 1002,
		"CNIReleaseSecondaryIPFailure":  1003,
		"CNIAllocateEIPFailure":         1004,
		"CNIReleaseEIPFailure":          1005,
		"CNIBindEIPFailure":             1006,
		"CNIUnbindEIPFailure":           1007,
		"CNIAllocateUNIFailure":         1008,
		"CNIReleaseUNIFailure":          1009,
		"CNIAttachUNIFailure":           1010,
		"CNIDetachUNIFailure":           1011,
		"CNIK8SAPIError":                1012,
		"CNIWriteDBError":               1013,
		"CNIReadDBError":                1014,
		"CNIBorrowIPFailure":            1015,
	}
)

func (x CNIErrorCode) Enum() *CNIErrorCode {
	p := new(CNIErrorCode)
	*p = x
	return p
}

func (x CNIErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CNIErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_ipamd_proto_enumTypes[0].Descriptor()
}

func (CNIErrorCode) Type() protoreflect.EnumType {
	return &file_rpc_ipamd_proto_enumTypes[0]
}

func (x CNIErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CNIErrorCode.Descriptor instead.
func (CNIErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{0}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{1}
}

type AddPodNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName      string `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNamespace string `protobuf:"bytes,2,opt,name=PodNamespace,proto3" json:"PodNamespace,omitempty"`
	SandboxID    string `protobuf:"bytes,3,opt,name=SandboxID,proto3" json:"SandboxID,omitempty"`
	Netns        string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName       string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
}

func (x *AddPodNetworkRequest) Reset() {
	*x = AddPodNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPodNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPodNetworkRequest) ProtoMessage() {}

func (x *AddPodNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPodNetworkRequest.ProtoReflect.Descriptor instead.
func (*AddPodNetworkRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{2}
}

func (x *AddPodNetworkRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *AddPodNetworkRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *AddPodNetworkRequest) GetSandboxID() string {
	if x != nil {
		return x.SandboxID
	}
	return ""
}

func (x *AddPodNetworkRequest) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *AddPodNetworkRequest) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type AddPodNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
	PodNetwork *PodNetwork  `protobuf:"bytes,2,opt,name=PodNetwork,proto3" json:"PodNetwork,omitempty"`
}

func (x *AddPodNetworkResponse) Reset() {
	*x = AddPodNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPodNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPodNetworkResponse) ProtoMessage() {}

func (x *AddPodNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPodNetworkResponse.ProtoReflect.Descriptor instead.
func (*AddPodNetworkResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{3}
}

func (x *AddPodNetworkResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

func (x *AddPodNetworkResponse) GetPodNetwork() *PodNetwork {
	if x != nil {
		return x.PodNetwork
	}
	return nil
}

type DelPodNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNetwork *PodNetwork `protobuf:"bytes,1,opt,name=PodNetwork,proto3" json:"PodNetwork,omitempty"`
}

func (x *DelPodNetworkRequest) Reset() {
	*x = DelPodNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPodNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPodNetworkRequest) ProtoMessage() {}

func (x *DelPodNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPodNetworkRequest.ProtoReflect.Descriptor instead.
func (*DelPodNetworkRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{4}
}

func (x *DelPodNetworkRequest) GetPodNetwork() *PodNetwork {
	if x != nil {
		return x.PodNetwork
	}
	return nil
}

type DelPodNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
}

func (x *DelPodNetworkResponse) Reset() {
	*x = DelPodNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPodNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPodNetworkResponse) ProtoMessage() {}

func (x *DelPodNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPodNetworkResponse.ProtoReflect.Descriptor instead.
func (*DelPodNetworkResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{5}
}

func (x *DelPodNetworkResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

type AddPodNetworkRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNetwork *PodNetwork `protobuf:"bytes,1,opt,name=PodNetwork,proto3" json:"PodNetwork,omitempty"`
}

func (x *AddPodNetworkRecordRequest) Reset() {
	*x = AddPodNetworkRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPodNetworkRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPodNetworkRecordRequest) ProtoMessage() {}

func (x *AddPodNetworkRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPodNetworkRecordRequest.ProtoReflect.Descriptor instead.
func (*AddPodNetworkRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{6}
}

func (x *AddPodNetworkRecordRequest) GetPodNetwork() *PodNetwork {
	if x != nil {
		return x.PodNetwork
	}
	return nil
}

type AddPodNetworkRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
}

func (x *AddPodNetworkRecordResponse) Reset() {
	*x = AddPodNetworkRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPodNetworkRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPodNetworkRecordResponse) ProtoMessage() {}

func (x *AddPodNetworkRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPodNetworkRecordResponse.ProtoReflect.Descriptor instead.
func (*AddPodNetworkRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{7}
}

func (x *AddPodNetworkRecordResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

type DelPodNetworkRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName   string `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNS     string `protobuf:"bytes,2,opt,name=PodNS,proto3" json:"PodNS,omitempty"`
	SandboxID string `protobuf:"bytes,3,opt,name=SandboxID,proto3" json:"SandboxID,omitempty"`
}

func (x *DelPodNetworkRecordRequest) Reset() {
	*x = DelPodNetworkRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPodNetworkRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPodNetworkRecordRequest) ProtoMessage() {}

func (x *DelPodNetworkRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPodNetworkRecordRequest.ProtoReflect.Descriptor instead.
func (*DelPodNetworkRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{8}
}

func (x *DelPodNetworkRecordRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DelPodNetworkRecordRequest) GetPodNS() string {
	if x != nil {
		return x.PodNS
	}
	return ""
}

func (x *DelPodNetworkRecordRequest) GetSandboxID() string {
	if x != nil {
		return x.SandboxID
	}
	return ""
}

type DelPodNetworkRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
}

func (x *DelPodNetworkRecordResponse) Reset() {
	*x = DelPodNetworkRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPodNetworkRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPodNetworkRecordResponse) ProtoMessage() {}

func (x *DelPodNetworkRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPodNetworkRecordResponse.ProtoReflect.Descriptor instead.
func (*DelPodNetworkRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{9}
}

func (x *DelPodNetworkRecordResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

type GetPodNetworkRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName   string `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNS     string `protobuf:"bytes,2,opt,name=PodNS,proto3" json:"PodNS,omitempty"`
	SandboxID string `protobuf:"bytes,3,opt,name=SandboxID,proto3" json:"SandboxID,omitempty"`
}

func (x *GetPodNetworkRecordRequest) Reset() {
	*x = GetPodNetworkRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPodNetworkRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodNetworkRecordRequest) ProtoMessage() {}

func (x *GetPodNetworkRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodNetworkRecordRequest.ProtoReflect.Descriptor instead.
func (*GetPodNetworkRecordRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{10}
}

func (x *GetPodNetworkRecordRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetPodNetworkRecordRequest) GetPodNS() string {
	if x != nil {
		return x.PodNS
	}
	return ""
}

func (x *GetPodNetworkRecordRequest) GetSandboxID() string {
	if x != nil {
		return x.SandboxID
	}
	return ""
}

type GetPodNetworkRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
	PodNetwork *PodNetwork  `protobuf:"bytes,2,opt,name=PodNetwork,proto3" json:"PodNetwork,omitempty"`
}

func (x *GetPodNetworkRecordResponse) Reset() {
	*x = GetPodNetworkRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPodNetworkRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodNetworkRecordResponse) ProtoMessage() {}

func (x *GetPodNetworkRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodNetworkRecordResponse.ProtoReflect.Descriptor instead.
func (*GetPodNetworkRecordResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{11}
}

func (x *GetPodNetworkRecordResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

func (x *GetPodNetworkRecordResponse) GetPodNetwork() *PodNetwork {
	if x != nil {
		return x.PodNetwork
	}
	return nil
}

type PodNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName      string `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNS        string `protobuf:"bytes,2,opt,name=PodNS,proto3" json:"PodNS,omitempty"`
	PodUID       string `protobuf:"bytes,3,opt,name=PodUID,proto3" json:"PodUID,omitempty"`
	SandboxID    string `protobuf:"bytes,4,opt,name=SandboxID,proto3" json:"SandboxID,omitempty"`
	NetNS        string `protobuf:"bytes,5,opt,name=NetNS,proto3" json:"NetNS,omitempty"`
	VPCIP        string `protobuf:"bytes,6,opt,name=VPCIP,proto3" json:"VPCIP,omitempty"`
	VPCID        string `protobuf:"bytes,7,opt,name=VPCID,proto3" json:"VPCID,omitempty"`
	SubnetID     string `protobuf:"bytes,8,opt,name=SubnetID,proto3" json:"SubnetID,omitempty"`
	Gateway      string `protobuf:"bytes,9,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	Mask         string `protobuf:"bytes,10,opt,name=Mask,proto3" json:"Mask,omitempty"`
	MacAddress   string `protobuf:"bytes,11,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	DedicatedUNI bool   `protobuf:"varint,12,opt,name=DedicatedUNI,proto3" json:"DedicatedUNI,omitempty"`
	InterfaceID  string `protobuf:"bytes,13,opt,name=InterfaceID,proto3" json:"InterfaceID,omitempty"`
	EIPID        string `protobuf:"bytes,14,opt,name=EIPID,proto3" json:"EIPID,omitempty"`
	CreateTime   int64  `protobuf:"varint,15,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	RecycleTime  int64  `protobuf:"varint,16,opt,name=RecycleTime,proto3" json:"RecycleTime,omitempty"`
	Recycled     bool   `protobuf:"varint,17,opt,name=Recycled,proto3" json:"Recycled,omitempty"`
}

func (x *PodNetwork) Reset() {
	*x = PodNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodNetwork) ProtoMessage() {}

func (x *PodNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodNetwork.ProtoReflect.Descriptor instead.
func (*PodNetwork) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{12}
}

func (x *PodNetwork) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PodNetwork) GetPodNS() string {
	if x != nil {
		return x.PodNS
	}
	return ""
}

func (x *PodNetwork) GetPodUID() string {
	if x != nil {
		return x.PodUID
	}
	return ""
}

func (x *PodNetwork) GetSandboxID() string {
	if x != nil {
		return x.SandboxID
	}
	return ""
}

func (x *PodNetwork) GetNetNS() string {
	if x != nil {
		return x.NetNS
	}
	return ""
}

func (x *PodNetwork) GetVPCIP() string {
	if x != nil {
		return x.VPCIP
	}
	return ""
}

func (x *PodNetwork) GetVPCID() string {
	if x != nil {
		return x.VPCID
	}
	return ""
}

func (x *PodNetwork) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *PodNetwork) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *PodNetwork) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *PodNetwork) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *PodNetwork) GetDedicatedUNI() bool {
	if x != nil {
		return x.DedicatedUNI
	}
	return false
}

func (x *PodNetwork) GetInterfaceID() string {
	if x != nil {
		return x.InterfaceID
	}
	return ""
}

func (x *PodNetwork) GetEIPID() string {
	if x != nil {
		return x.EIPID
	}
	return ""
}

func (x *PodNetwork) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PodNetwork) GetRecycleTime() int64 {
	if x != nil {
		return x.RecycleTime
	}
	return 0
}

func (x *PodNetwork) GetRecycled() bool {
	if x != nil {
		return x.Recycled
	}
	return false
}

type BorrowIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddr string `protobuf:"bytes,1,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
}

func (x *BorrowIPRequest) Reset() {
	*x = BorrowIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorrowIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorrowIPRequest) ProtoMessage() {}

func (x *BorrowIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorrowIPRequest.ProtoReflect.Descriptor instead.
func (*BorrowIPRequest) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{13}
}

func (x *BorrowIPRequest) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

type BorrowIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CNIErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=rpc.CNIErrorCode" json:"Code,omitempty"`
	IP   *PodNetwork  `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *BorrowIPResponse) Reset() {
	*x = BorrowIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_ipamd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BorrowIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BorrowIPResponse) ProtoMessage() {}

func (x *BorrowIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_ipamd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BorrowIPResponse.ProtoReflect.Descriptor instead.
func (*BorrowIPResponse) Descriptor() ([]byte, []int) {
	return file_rpc_ipamd_proto_rawDescGZIP(), []int{14}
}

func (x *BorrowIPResponse) GetCode() CNIErrorCode {
	if x != nil {
		return x.Code
	}
	return CNIErrorCode_CNISuccess
}

func (x *BorrowIPResponse) GetIP() *PodNetwork {
	if x != nil {
		return x.IP
	}
	return nil
}

var File_rpc_ipamd_proto protoreflect.FileDescriptor

var file_rpc_ipamd_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x65,
	0x74, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50,
	0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x50,
	0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x47, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0x3e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x4d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x44, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x50, 0x6f,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x4e, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x6f, 0x64, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x4e, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x6f, 0x64, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x50,
	0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xd8, 0x03, 0x0a,
	0x0a, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x4e, 0x53, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x64, 0x4e, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x6f, 0x64, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x64,
	0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x4e, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x65, 0x74, 0x4e, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x50, 0x43, 0x49, 0x50, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x50, 0x43, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x50,
	0x43, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x4e, 0x49, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x4e,
	0x49, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x49, 0x50, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x49, 0x50, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x42, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x5a, 0x0a, 0x10, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x4e, 0x49,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x02, 0x49, 0x50,
	0x2a, 0xad, 0x03, 0x0a, 0x0c, 0x43, 0x4e, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4e, 0x49, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4e, 0x49, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x10, 0xe9, 0x07, 0x12, 0x22, 0x0a, 0x1d,
	0x43, 0x4e, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xea, 0x07,
	0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0xeb, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x4e, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xec, 0x07, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x49, 0x50,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4e,
	0x49, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10,
	0xee, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4e, 0x49, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x45,
	0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xef, 0x07, 0x12, 0x1a, 0x0a, 0x15,
	0x43, 0x4e, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x49, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xf0, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4e, 0x49, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x4e, 0x49, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0xf1, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4e, 0x49, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x55, 0x4e, 0x49, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xf2, 0x07, 0x12, 0x18, 0x0a,
	0x13, 0x43, 0x4e, 0x49, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x55, 0x4e, 0x49, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x10, 0xf3, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4e, 0x49, 0x4b, 0x38,
	0x53, 0x41, 0x50, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf4, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x43, 0x4e, 0x49, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xf5, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x61, 0x64, 0x44, 0x42, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xf6, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4e, 0x49, 0x42, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x49, 0x50, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0xf7, 0x07,
	0x32, 0x9b, 0x04, 0x0a, 0x07, 0x43, 0x4e, 0x49, 0x49, 0x70, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x50, 0x12,
	0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_ipamd_proto_rawDescOnce sync.Once
	file_rpc_ipamd_proto_rawDescData = file_rpc_ipamd_proto_rawDesc
)

func file_rpc_ipamd_proto_rawDescGZIP() []byte {
	file_rpc_ipamd_proto_rawDescOnce.Do(func() {
		file_rpc_ipamd_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_ipamd_proto_rawDescData)
	})
	return file_rpc_ipamd_proto_rawDescData
}

var file_rpc_ipamd_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_ipamd_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rpc_ipamd_proto_goTypes = []interface{}{
	(CNIErrorCode)(0),                   // 0: rpc.CNIErrorCode
	(*PingRequest)(nil),                 // 1: rpc.PingRequest
	(*PingResponse)(nil),                // 2: rpc.PingResponse
	(*AddPodNetworkRequest)(nil),        // 3: rpc.AddPodNetworkRequest
	(*AddPodNetworkResponse)(nil),       // 4: rpc.AddPodNetworkResponse
	(*DelPodNetworkRequest)(nil),        // 5: rpc.DelPodNetworkRequest
	(*DelPodNetworkResponse)(nil),       // 6: rpc.DelPodNetworkResponse
	(*AddPodNetworkRecordRequest)(nil),  // 7: rpc.AddPodNetworkRecordRequest
	(*AddPodNetworkRecordResponse)(nil), // 8: rpc.AddPodNetworkRecordResponse
	(*DelPodNetworkRecordRequest)(nil),  // 9: rpc.DelPodNetworkRecordRequest
	(*DelPodNetworkRecordResponse)(nil), // 10: rpc.DelPodNetworkRecordResponse
	(*GetPodNetworkRecordRequest)(nil),  // 11: rpc.GetPodNetworkRecordRequest
	(*GetPodNetworkRecordResponse)(nil), // 12: rpc.GetPodNetworkRecordResponse
	(*PodNetwork)(nil),                  // 13: rpc.PodNetwork
	(*BorrowIPRequest)(nil),             // 14: rpc.BorrowIPRequest
	(*BorrowIPResponse)(nil),            // 15: rpc.BorrowIPResponse
}
var file_rpc_ipamd_proto_depIdxs = []int32{
	0,  // 0: rpc.AddPodNetworkResponse.Code:type_name -> rpc.CNIErrorCode
	13, // 1: rpc.AddPodNetworkResponse.PodNetwork:type_name -> rpc.PodNetwork
	13, // 2: rpc.DelPodNetworkRequest.PodNetwork:type_name -> rpc.PodNetwork
	0,  // 3: rpc.DelPodNetworkResponse.Code:type_name -> rpc.CNIErrorCode
	13, // 4: rpc.AddPodNetworkRecordRequest.PodNetwork:type_name -> rpc.PodNetwork
	0,  // 5: rpc.AddPodNetworkRecordResponse.Code:type_name -> rpc.CNIErrorCode
	0,  // 6: rpc.DelPodNetworkRecordResponse.Code:type_name -> rpc.CNIErrorCode
	0,  // 7: rpc.GetPodNetworkRecordResponse.Code:type_name -> rpc.CNIErrorCode
	13, // 8: rpc.GetPodNetworkRecordResponse.PodNetwork:type_name -> rpc.PodNetwork
	0,  // 9: rpc.BorrowIPResponse.Code:type_name -> rpc.CNIErrorCode
	13, // 10: rpc.BorrowIPResponse.IP:type_name -> rpc.PodNetwork
	1,  // 11: rpc.CNIIpam.Ping:input_type -> rpc.PingRequest
	3,  // 12: rpc.CNIIpam.AddPodNetwork:input_type -> rpc.AddPodNetworkRequest
	5,  // 13: rpc.CNIIpam.DelPodNetwork:input_type -> rpc.DelPodNetworkRequest
	7,  // 14: rpc.CNIIpam.AddPodNetworkRecord:input_type -> rpc.AddPodNetworkRecordRequest
	9,  // 15: rpc.CNIIpam.DelPodNetworkRecord:input_type -> rpc.DelPodNetworkRecordRequest
	11, // 16: rpc.CNIIpam.GetPodNetworkRecord:input_type -> rpc.GetPodNetworkRecordRequest
	14, // 17: rpc.CNIIpam.BorrowIP:input_type -> rpc.BorrowIPRequest
	2,  // 18: rpc.CNIIpam.Ping:output_type -> rpc.PingResponse
	4,  // 19: rpc.CNIIpam.AddPodNetwork:output_type -> rpc.AddPodNetworkResponse
	6,  // 20: rpc.CNIIpam.DelPodNetwork:output_type -> rpc.DelPodNetworkResponse
	8,  // 21: rpc.CNIIpam.AddPodNetworkRecord:output_type -> rpc.AddPodNetworkRecordResponse
	10, // 22: rpc.CNIIpam.DelPodNetworkRecord:output_type -> rpc.DelPodNetworkRecordResponse
	12, // 23: rpc.CNIIpam.GetPodNetworkRecord:output_type -> rpc.GetPodNetworkRecordResponse
	15, // 24: rpc.CNIIpam.BorrowIP:output_type -> rpc.BorrowIPResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_rpc_ipamd_proto_init() }
func file_rpc_ipamd_proto_init() {
	if File_rpc_ipamd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_ipamd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPodNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPodNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPodNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPodNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPodNetworkRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPodNetworkRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPodNetworkRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPodNetworkRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPodNetworkRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPodNetworkRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BorrowIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_ipamd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BorrowIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_ipamd_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_ipamd_proto_goTypes,
		DependencyIndexes: file_rpc_ipamd_proto_depIdxs,
		EnumInfos:         file_rpc_ipamd_proto_enumTypes,
		MessageInfos:      file_rpc_ipamd_proto_msgTypes,
	}.Build()
	File_rpc_ipamd_proto = out.File
	file_rpc_ipamd_proto_rawDesc = nil
	file_rpc_ipamd_proto_goTypes = nil
	file_rpc_ipamd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CNIIpamClient is the client API for CNIIpam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CNIIpamClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddPodNetwork(ctx context.Context, in *AddPodNetworkRequest, opts ...grpc.CallOption) (*AddPodNetworkResponse, error)
	DelPodNetwork(ctx context.Context, in *DelPodNetworkRequest, opts ...grpc.CallOption) (*DelPodNetworkResponse, error)
	AddPodNetworkRecord(ctx context.Context, in *AddPodNetworkRecordRequest, opts ...grpc.CallOption) (*AddPodNetworkRecordResponse, error)
	DelPodNetworkRecord(ctx context.Context, in *DelPodNetworkRecordRequest, opts ...grpc.CallOption) (*DelPodNetworkRecordResponse, error)
	GetPodNetworkRecord(ctx context.Context, in *GetPodNetworkRecordRequest, opts ...grpc.CallOption) (*GetPodNetworkRecordResponse, error)
	BorrowIP(ctx context.Context, in *BorrowIPRequest, opts ...grpc.CallOption) (*BorrowIPResponse, error)
}

type cNIIpamClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIIpamClient(cc grpc.ClientConnInterface) CNIIpamClient {
	return &cNIIpamClient{cc}
}

func (c *cNIIpamClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) AddPodNetwork(ctx context.Context, in *AddPodNetworkRequest, opts ...grpc.CallOption) (*AddPodNetworkResponse, error) {
	out := new(AddPodNetworkResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/AddPodNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) DelPodNetwork(ctx context.Context, in *DelPodNetworkRequest, opts ...grpc.CallOption) (*DelPodNetworkResponse, error) {
	out := new(DelPodNetworkResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/DelPodNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) AddPodNetworkRecord(ctx context.Context, in *AddPodNetworkRecordRequest, opts ...grpc.CallOption) (*AddPodNetworkRecordResponse, error) {
	out := new(AddPodNetworkRecordResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/AddPodNetworkRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) DelPodNetworkRecord(ctx context.Context, in *DelPodNetworkRecordRequest, opts ...grpc.CallOption) (*DelPodNetworkRecordResponse, error) {
	out := new(DelPodNetworkRecordResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/DelPodNetworkRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) GetPodNetworkRecord(ctx context.Context, in *GetPodNetworkRecordRequest, opts ...grpc.CallOption) (*GetPodNetworkRecordResponse, error) {
	out := new(GetPodNetworkRecordResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/GetPodNetworkRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIIpamClient) BorrowIP(ctx context.Context, in *BorrowIPRequest, opts ...grpc.CallOption) (*BorrowIPResponse, error) {
	out := new(BorrowIPResponse)
	err := c.cc.Invoke(ctx, "/rpc.CNIIpam/BorrowIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIIpamServer is the server API for CNIIpam service.
type CNIIpamServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddPodNetwork(context.Context, *AddPodNetworkRequest) (*AddPodNetworkResponse, error)
	DelPodNetwork(context.Context, *DelPodNetworkRequest) (*DelPodNetworkResponse, error)
	AddPodNetworkRecord(context.Context, *AddPodNetworkRecordRequest) (*AddPodNetworkRecordResponse, error)
	DelPodNetworkRecord(context.Context, *DelPodNetworkRecordRequest) (*DelPodNetworkRecordResponse, error)
	GetPodNetworkRecord(context.Context, *GetPodNetworkRecordRequest) (*GetPodNetworkRecordResponse, error)
	BorrowIP(context.Context, *BorrowIPRequest) (*BorrowIPResponse, error)
}

// UnimplementedCNIIpamServer can be embedded to have forward compatible implementations.
type UnimplementedCNIIpamServer struct {
}

func (*UnimplementedCNIIpamServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCNIIpamServer) AddPodNetwork(context.Context, *AddPodNetworkRequest) (*AddPodNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPodNetwork not implemented")
}
func (*UnimplementedCNIIpamServer) DelPodNetwork(context.Context, *DelPodNetworkRequest) (*DelPodNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPodNetwork not implemented")
}
func (*UnimplementedCNIIpamServer) AddPodNetworkRecord(context.Context, *AddPodNetworkRecordRequest) (*AddPodNetworkRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPodNetworkRecord not implemented")
}
func (*UnimplementedCNIIpamServer) DelPodNetworkRecord(context.Context, *DelPodNetworkRecordRequest) (*DelPodNetworkRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPodNetworkRecord not implemented")
}
func (*UnimplementedCNIIpamServer) GetPodNetworkRecord(context.Context, *GetPodNetworkRecordRequest) (*GetPodNetworkRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodNetworkRecord not implemented")
}
func (*UnimplementedCNIIpamServer) BorrowIP(context.Context, *BorrowIPRequest) (*BorrowIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowIP not implemented")
}

func RegisterCNIIpamServer(s *grpc.Server, srv CNIIpamServer) {
	s.RegisterService(&_CNIIpam_serviceDesc, srv)
}

func _CNIIpam_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_AddPodNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPodNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).AddPodNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/AddPodNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).AddPodNetwork(ctx, req.(*AddPodNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_DelPodNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPodNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).DelPodNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/DelPodNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).DelPodNetwork(ctx, req.(*DelPodNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_AddPodNetworkRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPodNetworkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).AddPodNetworkRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/AddPodNetworkRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).AddPodNetworkRecord(ctx, req.(*AddPodNetworkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_DelPodNetworkRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPodNetworkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).DelPodNetworkRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/DelPodNetworkRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).DelPodNetworkRecord(ctx, req.(*DelPodNetworkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_GetPodNetworkRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodNetworkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).GetPodNetworkRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/GetPodNetworkRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).GetPodNetworkRecord(ctx, req.(*GetPodNetworkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIIpam_BorrowIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIIpamServer).BorrowIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIIpam/BorrowIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIIpamServer).BorrowIP(ctx, req.(*BorrowIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIIpam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIIpam",
	HandlerType: (*CNIIpamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CNIIpam_Ping_Handler,
		},
		{
			MethodName: "AddPodNetwork",
			Handler:    _CNIIpam_AddPodNetwork_Handler,
		},
		{
			MethodName: "DelPodNetwork",
			Handler:    _CNIIpam_DelPodNetwork_Handler,
		},
		{
			MethodName: "AddPodNetworkRecord",
			Handler:    _CNIIpam_AddPodNetworkRecord_Handler,
		},
		{
			MethodName: "DelPodNetworkRecord",
			Handler:    _CNIIpam_DelPodNetworkRecord_Handler,
		},
		{
			MethodName: "GetPodNetworkRecord",
			Handler:    _CNIIpam_GetPodNetworkRecord_Handler,
		},
		{
			MethodName: "BorrowIP",
			Handler:    _CNIIpam_BorrowIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ipamd.proto",
}
