// Copyright UCloud. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/ucloud/uk8s-cni-vpc/kubernetes/apis/podnetworking/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePodNetworkings implements PodNetworkingInterface
type FakePodNetworkings struct {
	Fake *FakePodnetworkingV1beta1
	ns   string
}

var podnetworkingsResource = schema.GroupVersionResource{Group: "podnetworking.uk8s.com", Version: "v1beta1", Resource: "podnetworkings"}

var podnetworkingsKind = schema.GroupVersionKind{Group: "podnetworking.uk8s.com", Version: "v1beta1", Kind: "PodNetworking"}

// Get takes name of the podNetworking, and returns the corresponding podNetworking object, and an error if there is any.
func (c *FakePodNetworkings) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.PodNetworking, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(podnetworkingsResource, c.ns, name), &v1beta1.PodNetworking{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.PodNetworking), err
}

// List takes label and field selectors, and returns the list of PodNetworkings that match those selectors.
func (c *FakePodNetworkings) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.PodNetworkingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(podnetworkingsResource, podnetworkingsKind, c.ns, opts), &v1beta1.PodNetworkingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.PodNetworkingList{ListMeta: obj.(*v1beta1.PodNetworkingList).ListMeta}
	for _, item := range obj.(*v1beta1.PodNetworkingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested podNetworkings.
func (c *FakePodNetworkings) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(podnetworkingsResource, c.ns, opts))

}

// Create takes the representation of a podNetworking and creates it.  Returns the server's representation of the podNetworking, and an error, if there is any.
func (c *FakePodNetworkings) Create(ctx context.Context, podNetworking *v1beta1.PodNetworking, opts v1.CreateOptions) (result *v1beta1.PodNetworking, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(podnetworkingsResource, c.ns, podNetworking), &v1beta1.PodNetworking{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.PodNetworking), err
}

// Update takes the representation of a podNetworking and updates it. Returns the server's representation of the podNetworking, and an error, if there is any.
func (c *FakePodNetworkings) Update(ctx context.Context, podNetworking *v1beta1.PodNetworking, opts v1.UpdateOptions) (result *v1beta1.PodNetworking, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(podnetworkingsResource, c.ns, podNetworking), &v1beta1.PodNetworking{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.PodNetworking), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePodNetworkings) UpdateStatus(ctx context.Context, podNetworking *v1beta1.PodNetworking, opts v1.UpdateOptions) (*v1beta1.PodNetworking, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(podnetworkingsResource, "status", c.ns, podNetworking), &v1beta1.PodNetworking{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.PodNetworking), err
}

// Delete takes name of the podNetworking and deletes it. Returns an error if one occurs.
func (c *FakePodNetworkings) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(podnetworkingsResource, c.ns, name), &v1beta1.PodNetworking{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePodNetworkings) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(podnetworkingsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.PodNetworkingList{})
	return err
}

// Patch applies the patch and returns the patched podNetworking.
func (c *FakePodNetworkings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.PodNetworking, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(podnetworkingsResource, c.ns, name, pt, data, subresources...), &v1beta1.PodNetworking{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.PodNetworking), err
}
