// Copyright UCloud. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ucloud/uk8s-cni-vpc/kubernetes/apis/podnetworking/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodNetworkingLister helps list PodNetworkings.
// All objects returned here must be treated as read-only.
type PodNetworkingLister interface {
	// List lists all PodNetworkings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.PodNetworking, err error)
	// PodNetworkings returns an object that can list and get PodNetworkings.
	PodNetworkings(namespace string) PodNetworkingNamespaceLister
	PodNetworkingListerExpansion
}

// podNetworkingLister implements the PodNetworkingLister interface.
type podNetworkingLister struct {
	indexer cache.Indexer
}

// NewPodNetworkingLister returns a new PodNetworkingLister.
func NewPodNetworkingLister(indexer cache.Indexer) PodNetworkingLister {
	return &podNetworkingLister{indexer: indexer}
}

// List lists all PodNetworkings in the indexer.
func (s *podNetworkingLister) List(selector labels.Selector) (ret []*v1beta1.PodNetworking, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.PodNetworking))
	})
	return ret, err
}

// PodNetworkings returns an object that can list and get PodNetworkings.
func (s *podNetworkingLister) PodNetworkings(namespace string) PodNetworkingNamespaceLister {
	return podNetworkingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodNetworkingNamespaceLister helps list and get PodNetworkings.
// All objects returned here must be treated as read-only.
type PodNetworkingNamespaceLister interface {
	// List lists all PodNetworkings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.PodNetworking, err error)
	// Get retrieves the PodNetworking from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.PodNetworking, error)
	PodNetworkingNamespaceListerExpansion
}

// podNetworkingNamespaceLister implements the PodNetworkingNamespaceLister
// interface.
type podNetworkingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodNetworkings in the indexer for a given namespace.
func (s podNetworkingNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.PodNetworking, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.PodNetworking))
	})
	return ret, err
}

// Get retrieves the PodNetworking from the indexer for a given namespace and name.
func (s podNetworkingNamespaceLister) Get(name string) (*v1beta1.PodNetworking, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("podnetworking"), name)
	}
	return obj.(*v1beta1.PodNetworking), nil
}
