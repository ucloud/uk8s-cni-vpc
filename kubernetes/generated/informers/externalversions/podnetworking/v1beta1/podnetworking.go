// Copyright UCloud. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	podnetworkingv1beta1 "github.com/ucloud/uk8s-cni-vpc/kubernetes/apis/podnetworking/v1beta1"
	versioned "github.com/ucloud/uk8s-cni-vpc/kubernetes/generated/clientset/versioned"
	internalinterfaces "github.com/ucloud/uk8s-cni-vpc/kubernetes/generated/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/ucloud/uk8s-cni-vpc/kubernetes/generated/listers/podnetworking/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// PodNetworkingInformer provides access to a shared informer and lister for
// PodNetworkings.
type PodNetworkingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.PodNetworkingLister
}

type podNetworkingInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewPodNetworkingInformer constructs a new informer for PodNetworking type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPodNetworkingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPodNetworkingInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPodNetworkingInformer constructs a new informer for PodNetworking type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPodNetworkingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PodnetworkingV1beta1().PodNetworkings().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PodnetworkingV1beta1().PodNetworkings().Watch(context.TODO(), options)
			},
		},
		&podnetworkingv1beta1.PodNetworking{},
		resyncPeriod,
		indexers,
	)
}

func (f *podNetworkingInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPodNetworkingInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *podNetworkingInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&podnetworkingv1beta1.PodNetworking{}, f.defaultInformer)
}

func (f *podNetworkingInformer) Lister() v1beta1.PodNetworkingLister {
	return v1beta1.NewPodNetworkingLister(f.Informer().GetIndexer())
}
